syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "rpc_create_user.proto";
import "rpc_update_user.proto";
import "rpc_login_user.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/IgorCastilhos/BankApplication/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Bank Application API";
    version: "1.2";
    contact: {
      name: "Igor Castilhos";
      url: "https://github.com/IgorCastilhos";
      email: "igorcastilhos2010@hotmail.com";
    };
  };
};

service Bank {
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/create_user"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use essa API para criar um usuário";
      summary: "Criar usuário";
    };
  }
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/v1/update_user"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use essa API para atualizar um usuário";
      summary: "Atualizar usuário";
    };
  }
  rpc LoginUser (LoginUserRequest) returns (LoginUserResponse) {
    option (google.api.http) = {
      post: "/v1/login_user"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use essa API para fazer login, ganhar um token de acesso e um de atualização (refresh)";
      summary: "Faz o login do usuário";
    };
  }
}